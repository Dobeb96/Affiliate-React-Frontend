{"version":3,"sources":["redux/actions/index.js","components/Item/Item.js","components/ItemGallery/ItemGallery.js","App.js","serviceWorker.js","redux/reducers/itemsReducer.js","redux/reducers/index.js","index.js"],"names":["fetchItems","options","dispatch","a","type","api_endpoint","process","category","axios","get","then","response","items","Item","price_raw","parseFloat","toFixed","className","href","this","props","item","url","target","src","photos","alt","name","priceFormat","price_current","to","color","fontSize","React","Component","ItemGallery","isLoading","data","map","e","i","key","connect","state","itemsReducer","App","id","Grid","container","direction","justify","alignItems","lg","placeholder","exact","path","Boolean","window","location","hostname","match","initialState","error","action","Object","assign","allReducers","combineReducers","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a90d8f48.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const requestStarted = () => {\n    return {\n        type: 'REQUEST_STARTED'\n    }\n}\n\nexport const requestItemsSuccess = (json) => {\n    return {\n        type: 'REQUEST_ITEMS_SUCCESS',\n        items: json\n    }\n}\n\nexport const requestFailed = (error) => {\n    return {\n        type: 'REQUEST_FAILED',\n        error: error\n    }\n}\n\nexport function fetchItems(options) {\n    return async function (dispatch) {\n        dispatch(requestStarted())\n\n        // TODO: Error handling\n        let api_endpoint = `${process.env.REACT_APP_API_ENDPOINT}/items`\n        if (options.category) {\n            api_endpoint += '?category=' + options.category\n        }\n        axios.get(api_endpoint)\n        .then(\n            response => dispatch(requestItemsSuccess(response))\n        )\n    }\n}\n","import React from \"react\";\r\nimport \"./Item.scss\"\r\nimport MdHeartOutline from 'react-ionicons/lib/MdHeartOutline'\r\n\r\nclass Item extends React.Component {\r\n    priceFormat(price_raw) {\r\n        let price = parseFloat(price_raw)\r\n        return price.toFixed(0)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"card\">\r\n            <a href={this.props.item.url} target=\"_blank\">\r\n                <div className=\"card-image-wrapper\">\r\n                    <img\r\n                        className=\"card-image\"\r\n                        src={this.props.item.photos[0].url}\r\n                        alt={this.props.item.name}\r\n                    />\r\n                </div>\r\n                <div className=\"item-header\">\r\n                    <h3 className=\"item-name\">{this.props.item.name}</h3>\r\n                    <div className=\"item-price\">\r\n                        {this.priceFormat(this.props.item.price_current)} zł\r\n                    </div>\r\n                </div>\r\n            </a>\r\n            <div className=\"card-content-hover\">\r\n                <div className=\"btn-primary btn-round-small btn-hover-darken flex-middle item-favourite\" to=\"/\">\r\n                    <MdHeartOutline color=\"white\" fontSize=\"1.5em\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Item;\r\n","import React from \"react\";\nimport \"./ItemGallery.scss\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\nimport { connect } from \"react-redux\";\nimport { fetchItems } from \"../../redux/actions\";\nimport Item from \"../Item/Item\";\n\nclass ItemGallery extends React.Component {\n    componentDidMount() {\n        this.props.fetchItems({ category: this.props.category });\n    }\n\n    render() {\n        if (this.props.items.isLoading === true) {\n            return <div className=\"spinner-loading\">\n                <BounceLoader color=\"#fa6266\" />\n            </div>\n        } else {\n            return <div className=\"item-gallery-layout\">\n                {this.props.items.items.data.map((e, i) =>\n                    <Item key={i} item={e} />\n                )}\n            </div>\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        items: state.itemsReducer,\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        fetchItems,\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(ItemGallery);\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport ItemGallery from \"./components/ItemGallery/ItemGallery.js\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport \"./App.scss\"\r\nimport IosArrowDown from 'react-ionicons/lib/IosArrowDown'\r\nimport IosContactOutline from 'react-ionicons/lib/IosContactOutline'\r\nimport MdSearch from 'react-ionicons/lib/MdSearch'\r\nimport MdHeartOutline from 'react-ionicons/lib/MdHeartOutline'\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <Router>\r\n      <div className=\"content\">\r\n        <nav id=\"nav\" className=\"nav\">\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <div className=\"m-right\">{/* Empty div for easier flex positioning */}</div>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n              item={true}\r\n              lg={10}\r\n            >\r\n              <Link className=\"btn-primary\" to=\"/\">Strona główna</Link>\r\n              <Link className=\"btn-primary\" to=\"/popularne\">Popularne</Link>\r\n              <Link className=\"btn-primary\" to=\"/kategorie\">Kategorie</Link>\r\n              <Link className=\"btn-primary\" to=\"/ostatnio-przegladane\">Ostatnio przeglądane</Link>\r\n              <div className=\"relative\">\r\n                <input className=\"search main-search\" type=\"text\" placeholder=\"Szukaj..\" name=\"main-search\"></input>\r\n                <MdSearch className=\"search-icon\" color=\"#888\" fontSize=\"1.8em\" />\r\n              </div>\r\n              <Link className=\"btn-primary btn-round flex-middle\" to=\"/ulubione\">\r\n                <MdHeartOutline color=\"white\" fontSize=\"1.5em\" />\r\n              </Link>\r\n            </Grid>\r\n            <div className=\"btn flex-middle\">\r\n                <IosContactOutline color=\"black\" fontSize=\"3em\" />\r\n                <IosArrowDown color=\"black\" fontSize=\"1.5em\" />\r\n              </div>\r\n          </Grid>\r\n        </nav>\r\n\r\n        {/*\r\n          A <Switch> looks through all its children <Route>\r\n          elements and renders the first one whose path\r\n          matches the current URL. Use a <Switch> any time\r\n          you have multiple routes, but you want only one\r\n          of them to render at a time\r\n        */}\r\n        <Switch>\r\n          <Route exact path=\"/popularne\">\r\n            <ItemGallery key=\"popular\" category=\"popular\" />\r\n          </Route>\r\n          <Route exact path=\"/kategorie\">\r\n            <ItemGallery key=\"categories\" category=\"categories\" />\r\n          </Route>\r\n          <Route exact path=\"/ostatnio-przegladane\">\r\n            <ItemGallery key=\"last-viewed\" category=\"last-viewed\" />\r\n          </Route>\r\n          <Route exact path=\"/ulubione\">\r\n            <ItemGallery key=\"favourites\" category=\"favourites\" />\r\n          </Route>\r\n          <Route exact path=\"*\">\r\n            <ItemGallery key=\"home\" />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CardActions } from \"@material-ui/core\"\n\nconst initialState = {\n    isLoading: true,\n    items: null,\n    error: null,\n}\n\nconst itemsReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'REQUEST_STARTED':\n            return Object.assign({}, state, { isLoading: true })\n        case 'REQUEST_ITEMS_SUCCESS':\n            return Object.assign({}, state, { isLoading: false, items: action.items })\n        case 'REQUEST_FAILED':\n            return Object.assign({}, state, { isLoading: false, error: action.error })\n        default:\n            return state;\n    }\n}\n\nexport default itemsReducer;\n","import itemsReducer from './itemsReducer';\nimport { combineReducers } from 'redux'\n\nconst allReducers = combineReducers({\n    itemsReducer,\n})\n\nexport default allReducers;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport allReducers from './redux/reducers';\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  composeEnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}